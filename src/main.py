"""Main Streamlit application for RAG QA System."""

import streamlit as st
import logging
from datetime import datetime
from typing import Optional, Dict, Any

from config import get_settings
from document_processor import DocumentProcessor
from vector_store import VectorStoreManager
from query_engine import QueryEngine

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Page configuration
st.set_page_config(
    page_title="RAG QA System",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

def initialize_session_state():
    """Initialize Streamlit session state."""
    if 'settings' not in st.session_state:
        try:
            st.session_state.settings = get_settings()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            st.stop()
    
    if 'vector_store_manager' not in st.session_state:
        st.session_state.vector_store_manager = VectorStoreManager(
            api_key=st.session_state.settings.pinecone_api_key,
            environment=st.session_state.settings.pinecone_environment,
            index_name=st.session_state.settings.pinecone_index_name
        )
    
    if 'document_processor' not in st.session_state:
        st.session_state.document_processor = DocumentProcessor(
            max_file_size_mb=st.session_state.settings.max_file_size_mb,
            max_files_count=st.session_state.settings.max_files_count
        )
    
    if 'query_engine' not in st.session_state:
        st.session_state.query_engine = QueryEngine(st.session_state.vector_store_manager)
    
    if 'documents_loaded' not in st.session_state:
        st.session_state.documents_loaded = False
    
    if 'index_stats' not in st.session_state:
        st.session_state.index_stats = {}

def render_sidebar():
    """Render sidebar with filters and settings."""
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
    
    # Search parameters
    similarity_top_k = st.sidebar.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        min_value=1,
        max_value=10,
        value=st.session_state.settings.similarity_top_k,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞"
    )
    
    similarity_threshold = st.sidebar.slider(
        "–ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏",
        min_value=0.0,
        max_value=1.0,
        value=st.session_state.settings.similarity_threshold,
        step=0.1,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    )
    
    # Metadata filters
    st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    author_filter = st.sidebar.text_input(
        "–ê–≤—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞..."
    )
    
    # Store filters in session state
    st.session_state.search_params = {
        "similarity_top_k": similarity_top_k,
        "similarity_threshold": similarity_threshold,
        "metadata_filters": {}
    }
    
    if author_filter:
        st.session_state.search_params["metadata_filters"]["author"] = author_filter
    
    # Index statistics
    if st.session_state.index_stats:
        st.sidebar.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞")
        stats = st.session_state.index_stats
        st.sidebar.metric("–í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤", stats.get("total_vectors", 0))
        st.sidebar.metric("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å", stats.get("dimension", 0))
        if stats.get("index_fullness"):
            st.sidebar.metric("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å", f"{stats['index_fullness']:.1%}")
    
    # Query statistics
    query_stats = st.session_state.query_engine.get_statistics()
    if query_stats["total_queries"] > 0:
        st.sidebar.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
        st.sidebar.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", query_stats["total_queries"])
        st.sidebar.metric("–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{query_stats['avg_confidence']:.1f}%")
        
        if query_stats["language_distribution"]:
            st.sidebar.write("**–Ø–∑—ã–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:**")
            for lang, count in query_stats["language_distribution"].items():
                st.sidebar.write(f"- {lang}: {count}")

def render_document_upload():
    """Render document upload section."""
    st.header("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª—ã",
        type=['pdf'],
        accept_multiple_files=True,
        help=f"–ú–∞–∫—Å–∏–º—É–º {st.session_state.settings.max_files_count} —Ñ–∞–π–ª–æ–≤, –¥–æ {st.session_state.settings.max_file_size_mb}MB –∫–∞–∂–¥—ã–π"
    )
    
    if uploaded_files:
        st.write(f"**–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** {len(uploaded_files)}")
        
        # Show file details
        for file in uploaded_files:
            file_size_mb = file.size / (1024 * 1024)
            st.write(f"- {file.name} ({file_size_mb:.1f}MB)")
        
        if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", type="primary"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
                # Process documents
                documents = st.session_state.document_processor.process_uploaded_files(uploaded_files)
                
                if documents:
                    st.success(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    
                    # Initialize or create index
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞..."):
                        if not st.session_state.vector_store_manager.create_index():
                            st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ Pinecone")
                            return
                        
                        if not st.session_state.vector_store_manager.create_vector_index(documents):
                            st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞")
                            return
                    
                    st.session_state.documents_loaded = True
                    st.session_state.index_stats = st.session_state.vector_store_manager.get_index_stats()
                    st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã!")
                    st.rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")

def render_query_interface():
    """Render query interface."""
    st.header("ü§ñ –ü–æ–∏—Å–∫ –∏ –≤–æ–ø—Ä–æ—Å—ã")
    
    if not st.session_state.documents_loaded:
        # Try to load existing index
        if st.session_state.vector_store_manager.load_existing_index():
            st.session_state.documents_loaded = True
            st.session_state.index_stats = st.session_state.vector_store_manager.get_index_stats()
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return
    
    # Query input
    query = st.text_area(
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö?",
        height=100
    )
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        search_button = st.button("üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç", type="primary", disabled=not query.strip())
    
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.query_engine.clear_history()
            st.success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
            st.rerun()
    
    if search_button and query.strip():
        with st.spinner("–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."):
            result = st.session_state.query_engine.process_query(
                query=query,
                **st.session_state.search_params
            )
        
        if result["success"]:
            # Display answer
            st.subheader("üí° –û—Ç–≤–µ—Ç")
            st.write(result["answer"])
            
            # Display confidence
            confidence = result["confidence"]
            if confidence >= 80:
                confidence_color = "green"
                confidence_label = "–í—ã—Å–æ–∫–∞—è"
            elif confidence >= 60:
                confidence_color = "orange"
                confidence_label = "–°—Ä–µ–¥–Ω—è—è"
            else:
                confidence_color = "red"
                confidence_label = "–ù–∏–∑–∫–∞—è"
            
            st.metric(
                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ",
                f"{confidence:.1f}%",
                delta=f"{confidence_label}"
            )
            
            # Display sources
            if result["sources"]:
                st.subheader("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
                for source in result["sources"]:
                    with st.expander(f"üìÑ {source['filename']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source['score']:.2f})"):
                        st.write(f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {source['title']}")
                        st.write(f"**–ê–≤—Ç–æ—Ä:** {source['author']}")
                        st.write(f"**–§—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞:**")
                        st.write(source['text_snippet'])
        else:
            st.error(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

def render_query_history():
    """Render query history."""
    st.header("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    history = st.session_state.query_engine.get_query_history()
    
    if not history:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")
        return
    
    for i, item in enumerate(reversed(history[-5:])):  # Show last 5
        with st.expander(f"‚ùì {item['query'][:50]}... ({item['timestamp'][:19]})"):
            st.write(f"**–í–æ–ø—Ä–æ—Å:** {item['query']}")
            st.write(f"**–û—Ç–≤–µ—Ç:** {item['answer']}")
            st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {item['confidence']:.1f}%")
            st.write(f"**–Ø–∑—ã–∫:** {item['language']}")
            st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤:** {len(item['sources'])}")

def main():
    """Main application function."""
    st.title("üìö RAG QA System")
    st.markdown("–°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥")
    
    # Initialize session state
    initialize_session_state()
    
    # Render sidebar
    render_sidebar()
    
    # Main content
    tab1, tab2, tab3 = st.tabs(["üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", "üîç –ü–æ–∏—Å–∫", "üìã –ò—Å—Ç–æ—Ä–∏—è"])
    
    with tab1:
        render_document_upload()
    
    with tab2:
        render_query_interface()
    
    with tab3:
        render_query_history()

if __name__ == "__main__":
    main()